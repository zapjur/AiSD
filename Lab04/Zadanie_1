import random
import time

def randArr(A, r=10000):
    for i in range(int(r)):
        A.append(random.randint(0, r))
    return A


def instertionsort(A):
    for i in range(1, len(A) - 1):
        x = A[i]
        j = i - 1
        while j >= 0 and A[j] > x:
            A[j+1] = A[j]
            j -= 1

        A[j+1] = x

def merge(A, left, mid, right):
    x = int(mid - left + 1)
    y = int(right - mid)

    L = [0] * (x)
    R = [0] * (y)

    for i in range(0, x):
        L[i] = A[int(left + i)]

    for j in range(0, y):
        R[j] = A[int(mid + 1 +j)]

    i = 0
    j = 0
    k = left

    while i < x and j < y:
        if L[i] <= R[j]:
            A[k] = L[i]
            i += 1
        else:
            A[k] = R[j]
            j += 1
        k += 1

    while i < x:
        A[k] = L[i]
        i += 1
        k += 1

    while j < y:
        A[k] = R[j]
        j += 1
        k += 1

def mergesort(A, left, right):
    try: 
        if left < right:
            mid = left+(right - left)//2
            mergesort(A, left, mid)
            mergesort(A, mid+1, right)
            merge(A, left, mid, right)
    except RecursionError:
        pass

def checkTimeMergeSort(A):
    stime = time.time()
    mergesort(A, 0 , len(A)-1)
    return (time.time() - stime)

def checkTimeInstertionSort(A):
    stime = time.time()
    instertionsort(A)
    return(time.time() - stime)

def main():
    A=[]
    itterations = 10
    length = 2000
    results1 =[]
    results2 = []
    for i in range(itterations):
        A = randArr(A, 2000)
        B = A
        results1.append(checkTimeInstertionSort(A))
        results2.append(checkTimeMergeSort(B))

    print("Czas dla merge:", sum(results2)/len(results2))
    print("Max czas dla merge:", max(results2))
    print("Min czas dla merge: ", min(results2))

    print("Czas dla instertattatation:", sum(results1)/len(results1))
    print("Max czas dla insertionsort:", max(results1))
    print("Min czas dla insertionsort: ", min(results1))

main()

